includes:
	- phpstan.base.neon

parameters:
	level: 8
	resultCachePath: %currentWorkingDirectory%/var/tools/PHPStan/resultCache.src.php

	ignoreErrors:
		# Values mapping to object
		- message: '#^Variable property access on Orisai\\ObjectMapper\\MappedObject\.$#'
		  path: ../src/Processing/DefaultProcessor.php
		  count: 2
		# Callback call
		- message: '#^Variable static method call on class-string\<Orisai\\ObjectMapper\\MappedObject\>\.$#'
		  path: ../src/Callbacks/BaseCallback.php
		  count: 1
		- message: '#^Variable method call on Orisai\\ObjectMapper\\MappedObject\.$#'
		  path: ../src/Callbacks/BaseCallback.php
		  count: 1

		# Proper object -> MappedObject type checks are currently missing
		- message: '#(.+)expects ReflectionClass\<(.+)MappedObject\>, ReflectionClass\<object\> given\.$#'
		  path: ../src/Meta/MetaResolver.php

		# Serialization, who cares
		- message: '#^Property (.+)CallbackRuntimeMeta(.+)\$declaringClass \(ReflectionClass\<(.+)MappedObject\>\) does not accept ReflectionClass\<object\>\.$#'
		  path: ../src/Meta/Runtime/CallbackRuntimeMeta.php

		# Generics
		# Generics - class-string-map https://psalm.dev/r/155368cea8
		- message: '#^Property (.+) with generic interface Orisai\\ObjectMapper\\Rules\\Rule does not specify its types\: T_ARGS$#'
		  path: ../src/Rules/DefaultRuleManager.php
		- message: '#^Method (.+)RuleManager\:\:getRule\(\) should return T of (.+)Rule but returns (.+)Rule\.$#'
		  path: ../src/Rules/DefaultRuleManager.php
		- message: '#^Method (.+)Options\:\:getDynamicContext\(\) should return T of object but returns object\.$#'
		  path: ../src/Processing/Options.php
		- message: '#^Method (.+)NodeRuntimeMeta\:\:getModifier\(\) should return (.+)ModifierRuntimeMeta\<T of (.+)Args\>\|null but returns (.+)ModifierRuntimeMeta\<(.+)Args>\|null\.$#'
		  path: ../src/Meta/Runtime/NodeRuntimeMeta.php
		  count: 1
		# Generics - phpstan resolves correct class-string as a constant string - but not on test site https://phpstan.org/r/ce7cd979-ab2f-4373-a589-f63bfa01ca33
		- message: '#^Method (.+)(Before|After)\:\:getType\(\) should return class-string\<(.+)Callback\<(.+)Args\>\> but returns ''(.+)Callback''\.$#'
		  path: ../src/Attributes/Callbacks
		- message: '#^Method (.+)\:\:getType\(\) should return class-string\<(.+)Rule\<(.+)Args\>\> but returns ''(.+)Rule''\.$#'
		  paths:
		  	- ../src/Attributes/Expect
		  	- ../src/Bridge/NextrasOrm/EntityFromId.php
		- message: '#^Method (.+)\:\:getType\(\) should return class-string\<(.+)Modifier\<(.+)Args\>\> but returns ''(.+)Modifier''\.$#'
		  path: ../src/Attributes/Modifiers
		- message: '#^Parameter \#5 \$callbackType of method (.+)\:\:(handleClass|apply)(Callbacks)\(\) expects class-string\<(.+)Callback\<(.+)Args\>\>, ''(.+)Callback'' given\.$#'
		  path: ../src/Processing/DefaultProcessor.php
		# Generics - specifying type would cause too many errors like "Strict comparison using === between class-string<Modifier<Args>> and 'FieldNameModifier' will always evaluate to false."
		- message: '#^Method (.+)ModifierCompileMeta\:\:getType\(\) return type with generic interface (.+)Modifier does not specify its types: T$#'
		  path: ../src/Meta/Compile/ModifierCompileMeta.php
