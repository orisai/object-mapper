includes:
	- ../vendor/phpstan/phpstan/conf/bleedingEdge.neon
	- phpstan.baseline.neon

parameters:
	phpVersion: 80200
	level: 8
	tmpDir: ../var/tools/PHPStan
	resultCachePath: %currentWorkingDirectory%/var/tools/PHPStan/resultCache.php

	checkBenevolentUnionTypes: true
	checkMissingCallableSignature: true
	checkInternalClassCaseSensitivity: true
	checkTooWideReturnTypesInProtectedAndPublicMethods: true

	exceptions:
		check:
			missingCheckedExceptionInThrows: true
			tooWideThrowType: true
		checkedExceptionClasses:
			- Orisai\Exceptions\Check\CheckedException

	ignoreErrors:
		# Values mapping to object
		-
			message: '#^Variable property access on Orisai\\ObjectMapper\\MappedObject\.$#'
			path: ../src/Processing/DefaultProcessor.php
			count: 2

		# Callback call
		-
			message: '#^Variable static method call on class-string\<Orisai\\ObjectMapper\\MappedObject\>\.$#'
			path: ../src/Callbacks/BaseCallback.php
			count: 1
		-
			message: '#^Variable method call on Orisai\\ObjectMapper\\MappedObject\.$#'
			path: ../src/Callbacks/BaseCallback.php
			count: 1

		# Dark mapping magic
		-
			message: '#^Class (.+)VO has an uninitialized readonly property \$(.+)\. Assign it in the constructor\.$#'
			path: ../tests/Doubles
		-
			message: '#^Property (.+)VO\:\:\$(.+) is never written, only read\.$#'
			path: ../tests/Doubles
		-
			message: '#^(Method|Static method) (.+)VO\:\:(.+)\(\) is unused\.$#'
			path: ../tests/Doubles

		# Tests are expected to throw exceptions
		-
			message: '#^Method (.+) throws checked exception (.+) but it''s missing from the PHPDoc @throws tag\.$#'
			path: ../tests/Unit

		# Callback/Rule template is declared as covariant for practical reasons
		# - not declaring it covariant would cause too many errors elsewhere
		# - Callback/Rule self-validates type of Args
		-
			message: '#^Template type T_ARGS is declared as covariant, but occurs in contravariant position in parameter args of method (.+)\:\:processValue\(\)\.$#'
			path: ../src/Rules/Rule.php
		-
			message: '#^Template type T_ARGS is declared as covariant, but occurs in contravariant position in parameter args of method (.+)\:\:createType\(\)\.$#'
			path: ../src/Rules/Rule.php
		-
			message: '#^Template type T_ARGS is declared as covariant, but occurs in contravariant position in parameter args of method (.+)\:\:invoke\(\)\.$#'
			path: ../src/Callbacks/Callback.php

		################################################################################################################

		# Proper object -> MappedObject type checks are currently missing
		-
			message: '#(.+)expects ReflectionClass\<(.+)MappedObject\>, ReflectionClass\<object\> given\.$#'
			path: ../src/Meta/MetaResolver.php

		# Serialization, who cares
		-
			message: '#^Property (.+)CallbackRuntimeMeta(.+)\$declaringClass \(ReflectionClass\<(.+)MappedObject\>\) does not accept ReflectionClass\<object\>\.$#'
			path: ../src/Meta/Runtime/CallbackRuntimeMeta.php

		# Generics
		# Generics - class-string-map https://psalm.dev/r/155368cea8
		-
			message: '#^Property (.+) with generic interface Orisai\\ObjectMapper\\Rules\\Rule does not specify its types\: T_ARGS$#'
			path: ../src/Rules/DefaultRuleManager.php
		-
			message: '#^Method (.+)RuleManager\:\:getRule\(\) should return T of (.+)Rule but returns (.+)Rule\.$#'
			path: ../src/Rules/DefaultRuleManager.php
		-
			message: '#^Method (.+)Options\:\:getDynamicContext\(\) should return T of object but returns object\.$#'
			path: ../src/Processing/Options.php
		-
			message: '#^Method (.+)NodeRuntimeMeta\:\:getModifier\(\) should return (.+)ModifierRuntimeMeta\<T of (.+)Args\>\|null but returns (.+)ModifierRuntimeMeta\<(.+)Args>\|null\.$#'
			path: ../src/Meta/Runtime/NodeRuntimeMeta.php
			count: 1

		# Temporary workaround
		-
			message: '#^Property (.+)\:\:\$processor \((.+)DefaultProcessor\) does not accept (.+)\\Processor\.$#'
			path: ../tests/Toolkit/ProcessingTestCase.php
